void reorderList(ListNode* head) {
	if (!head || !head->next)
	  return;
	ListNode *middle = new ListNode(0);
	middle = findMiddle(head);
	middle = Reverse(middle);
	head = merge(head, middle);

}

ListNode* findMiddle(ListNode* head) {
	ListNode* slow = head;
	ListNode* fast = head;
	while(fast->next){
		if (fast->next->next){
			fast = fast->next->next;
			slow = slow->next;

		}else
		  break;

	}
	ListNode *rslt = slow->next;
	slow->next = NULL;
	return rslt;

}

ListNode* Reverse(ListNode* head) {
	ListNode *persudo_head = NULL, *nextNode = NULL;
	while( head  ){
		nextNode = head->next;
		head->next = persudo_head;
		persudo_head = head;
		head = nextNode;

	}
	return persudo_head;

}


ListNode* merge(ListNode* head1, ListNode* head2){
	ListNode* newHead = new ListNode(0);
	ListNode* temp = new ListNode(0);
	newHead->next = temp;
	while(head1 || head2){
		if (head1){
			temp->next = head1;
			head1 = head1->next;
			temp = temp->next;

		}
		if (head2){
			temp->next = head2;
			head2 = head2->next;
			temp = temp->next;

		}

	}
	temp->next = NULL;
	return newHead->next->next;

}
